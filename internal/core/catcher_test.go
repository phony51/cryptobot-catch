package core_test

import (
	"context"
	"cryptobot-catch/internal/core"
	"cryptobot-catch/internal/core/cheques"
	"github.com/gotd/td/tg"
	"testing"
)

type MockWallet struct{}

func (w *MockWallet) ActivateCheque(ctx context.Context, chequeID string) error {
	return nil
}

var (
	textExtractor      = &cheques.TextExtractor{}
	inlineExtractor    = &cheques.InlineExtractor{}
	inlineChequeUpdate = &tg.UpdateEditChannelMessage{
		Message: &tg.Message{
			ReplyMarkup: &tg.ReplyInlineMarkup{
				Rows: []tg.KeyboardButtonRow{
					{
						Buttons: []tg.KeyboardButtonClass{
							&tg.KeyboardButtonURL{
								URL: "http://t.me/send?start=CQ8dBasuJKhG",
							},
						},
					},
				},
			},
		},
	}
	textChequeUpdate = &tg.UpdateNewChannelMessage{
		Message: &tg.Message{Message: "‚Äã (https://imggen.send.tg/checks/image?asset=USDT&asset_amount=0.01999&fiat=RUB&fiat_amount=1.57&main=asset&v2)–ß–µ–∫\n\n–°—É–º–º–∞: ü™ô 0.019994 USDT (1.57 RUB)\n\n–õ—é–±–æ–π –º–æ–∂–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —á–µ–∫.\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —á–µ–∫–æ–º:\nt.me/send?start=CQ8dBasuJKhG\n\n‚ö†Ô∏è –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ —á–µ–∫–∞ –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –µ–≥–æ –Ω–∏–∫–æ–º—É! –°—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ—à–µ–Ω–Ω–∏–∫–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–∏–º —Å—Ä–µ–¥—Å—Ç–≤–∞–º."},
	}
)

func BenchmarkCatcher_Inline(b *testing.B) {
	c := core.NewCatcher([]cheques.Extractor{inlineExtractor}, &MockWallet{})
	ctx := context.Background()

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_ = c.EditChannelMessageHandle(ctx, tg.Entities{}, inlineChequeUpdate)
	}
	b.ReportAllocs()
	b.ReportMetric(float64(b.N)/b.Elapsed().Seconds(), "msg/s")
}

func BenchmarkCatcher_Text(b *testing.B) {
	c := core.NewCatcher([]cheques.Extractor{inlineExtractor}, &MockWallet{})
	ctx := context.Background()

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_ = c.NewChannelMessageHandle(ctx, tg.Entities{}, textChequeUpdate)
	}
	b.ReportAllocs()
	b.ReportMetric(float64(b.N)/b.Elapsed().Seconds(), "msg/s")
}

func BenchmarkCatcher_Inline_Text(b *testing.B) {
	c := core.NewCatcher([]cheques.Extractor{inlineExtractor, textExtractor}, &MockWallet{})
	ctx := context.Background()

	b.ResetTimer()
	b.ReportAllocs()
	for i := 0; i < b.N; i++ {
		if i%2 == 0 {
			_ = c.NewChannelMessageHandle(ctx, tg.Entities{}, textChequeUpdate)
		} else {
			_ = c.EditChannelMessageHandle(ctx, tg.Entities{}, inlineChequeUpdate)
		}
	}
	b.ReportMetric(float64(b.N)/b.Elapsed().Seconds(), "msg/s")
}
